.. _node-schema-versions-and-migrations:

============================
Schema Versions & Migrations
============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _node-schema-version:

Schema Versions
---------------

A **schema version** identifies the state of a :ref:`{+backend-schema+}
<node-realm-schema>` at some point in time. {+client-database+} tracks the schema
version of each {+realm+} and uses it to map the objects in each {+realm+}
to the correct schema.

Schema versions are ascending integers that you can optionally include
in the {+realm+} configuration when you open a {+realm+}. If a client
application does not specify a version number when it opens a {+realm+} then
the {+realm+} defaults to version ``0``.

.. _node-local-migration:

Migrations
----------

A **migration** transforms an existing {+realm+} and its objects from its
current :ref:`schema version <node-schema-version>` to a newer one.
Application data models typically change over time to accommodate new
requirements and features. Migrations give you the flexibility to
automatically update your existing application data whenever a client
application upgrades to a newer version.

.. important:: Increment Versions Monotonically
   
   Migrations must update a {+realm+} to a higher schema version.
   {+client-database+} throws an error if a client application opens a {+realm+}
   with a schema version that is lower its current version or if the specified
   schema version is the same as the {+realm+}'s current version but includes
   different :ref:`object schemas <node-object-schema>`.

Migrations have access to the existing {+backend-schema+}, version, and objects
and define logic that incrementally updates the {+realm+} to its new schema
version. To perform a local migration you must specify a new schema version that
is higher than the current version and provide a migration function when you
open the out-of-date {+realm+}.

{+service+} automatically migrates certain changes, such as new and deleted
properties, but does not automatically set values for new properties unless the
updated object schema specifies a default value. You can define additional logic
in the migration that dynamically calculates a new property's value. Migrations
do not allow you to directly rename a property. Instead, it treats a renamed
property as a new property that you must set to the value of the old property
before {+service+} automatically deletes it.

.. example::
   
   A {+realm+} using schema version ``1`` has a ``Person`` object type:
   
   .. tabs-realm-languages::
     
     .. tab::
         :tabid: javascript

         .. literalinclude:: /examples/Migrations/PersonClassV1/PersonClassV1.js
           :language: javascript
           :emphasize-lines: 4, 5
   
   The developer decides that the ``Person`` class should use a combined
   ``fullName`` field instead of the separate ``firstName`` and
   ``lastName`` fields:
   
   .. tabs-realm-languages::
     
     .. tab::
         :tabid: javascript
         
         .. literalinclude:: /examples/Migrations/PersonClassV2/PersonClassV2.js
           :language: javascript
           :emphasize-lines: 4
   
   To migrate the {+realm+} to conform to the updated ``Person`` schema, the
   developer sets the {+realm+}'s :ref:`schema version <node-schema-version>` to
   ``2`` and defines a migration function to set the value of
   ``fullName`` based on the existing ``firstName`` and ``lastName``
   properties:
   
   .. tabs-realm-languages::
     
     .. tab::
         :tabid: javascript
         
         .. literalinclude:: /examples/Migrations/LocalMigration/LocalMigration.js
           :language: javascript
           :emphasize-lines: 3, 14
